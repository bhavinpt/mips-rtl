100011_00000_00001_00000_00000_000100    // LW  R1, 4(R0)
100011_00000_00010_00000_00000_001000    // LW  R2, 8(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00001_00010_00011_00000_100000    // ADD R3, R1, R2
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_001100    // LW  R1, 12(R0)
100011_00000_00010_00000_00000_010000    // LW  R2, 16(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00001_00010_00011_00000_100010    // SUB R3, R1, R2
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_010100    // LW  R1, 20(R0)
100011_00000_00010_00000_00000_011000    // LW  R2, 24(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00001_00010_00011_00000_100100    // AND R3, R1, R2
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_011100    // LW  R1, 28(R0)
100011_00000_00010_00000_00000_000100    // LW  R2, 32(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00001_00010_00011_00000_100101    // OR  R3, R1, R2
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_100100    // LW  R1, 36(R0)
100011_00000_00010_00000_00000_101000    // LW  R2, 40(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00001_00010_00011_00000_100110    // XOR  R3, R1, R2
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_101100    // LW  R1, 44(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00001_00011_00100_000000    // SLL  R3, R1, #4
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_110000    // LW  R1, 48(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00001_00011_00100_000010    // SRL  R3, R1, #4
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_110100    // LW  R1, 52(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00001_00011_00100_000011    // SRA  R3, R1, #4
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_111000    // LW  R1, 56(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
001000_00001_00011_10100_00010_100000    // ADDI  R3, R1, 0x5050
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00000_111100    // LW  R1, 60(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
001100_00001_00011_10100_00010_100000    // ANDI  R3, R1, 0x0A0A
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00001_000000    // LW  R1, 64(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
001101_00001_00011_00000_00011_111111    // ORI  R3, R1, 0x00FF
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00001_000100    // LW  R1, 68(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
001110_00001_00011_00000_00011_111111    // XORI  R3, R1, 0xFF
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00011_00000_00000_00000_000000    // SW  R3, 0(R0)

100011_00000_00001_00000_00001_001000    // LW  R1, 72(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
101011_00001_00000_00000_00000_000000    // SW  R1, 0(R0)
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP
000000_00000_00000_00000_00000_000000    // NOP

111111_11111_11111_11111_11111_111111      //  END OF PROG


//100011_00000_00001_0000000000000000			//	LW      R1  0x0 (R0)    ; n1
//100011_00000_00010_0000000000000100			//	LW      R2  0x4 (R0)    ; n2
//000000_00000_00000_0000000000000000			//	NOP                     ; load delay from n1 to exp1 mask
//001100_00001_00011_0111110000000000			//	ANDI    R3  R1  0x7C00  ; exp1 mask 0111110000000000
//001100_00010_00100_0111110000000000			//	ANDI    R4  R2  0x7C00  ; exp2 mask 0111110000000000
//000000_00000_00011_0001101010000000			//  SLL     R3  R3  0xA     ; exp1 
//000000_00000_00100_0010001010000000			//  SLL     R4  R4  0xA     ; exp2
//001100_00001_00101_0000001111111111			//	ANDI    R5  R1  0x03FF  ; mant1 mask 0000001111111111
//001100_00010_00110_0000001111111111			//	ANDI    R6  R2  0x03FF  ; mant2 mask 0000001111111111
//001101_00011_00101_0000010000000000			//  ORI     R5  R3  0x0400  ; 1.mant1 
//001101_00100_00110_0000010000010000			//  ORI     R6  R4  0x0400  ; 1.mant1
//111111_11111_11111_1111111111111111           //  END OF PROG


//////////////// ISA ///////////////////

// R-Type : opcode (6b)[31:26] | rs (5b)[25:21] | rt (5b)[20:16] | rd (5b)[15:11]  | shamt(5)[10:6] | funct(6)[5:0]
// I-Type : opcode (6b)[31:26] | rs (5b)[25:21] | rt (5b)[20:16] | imm(16)[15:0]

//? add rd, rs, rt // rd <-- rs ADD rt                           000000	rs	rt	rd	00000  100000
//? sub rd, rs, rt // rd <-- rs SUB rt                           000000	rs	rt	rd	00000  100010
//? and rd, rs, rt // rd <-- rs AND rt                           000000	rs	rt	rd	00000  100100
//? or  rd, rs, rt // rd <-- rs OR rt                            000000	rs	rt	rd	00000  100101
//? xor rd, rs, rt // rd <-- rs XOR rt                           000000	rs	rt	rd	00000  100110

//? sll rd, rt, sa // rd <-- rt SLL sa                           000000	00	rt	rd	sa	   000000
//? srl rd, rt, sa // rd <-- rt SRL sa                           000000	00	rt	rd	sa	   000010
//? sra rd, rt, sa // rd <-- rt SRA sa                           000000	00	rt	rd	sa	   000011

//? addi rt, rs, immediate // rt <-- rs ADD (sign)immediate      001000	rs	rt	imm
//? andi rt, rs, immediate // rt <-- rs AND (zero)immediate      001100	rs	rt	imm
//? ori  rt, rs, immediate // rt <-- rs OR (zero)immediate       001101	rs	rt	imm
//? xori rt, rs, immediate // rt <-- rs XOR (zero)immediate      001110	rs	rt	imm

//? lw rt, offset(rs) // rt <-- memory[rs + offset]              100011	rs	rt	offset
//? sw rt, offset(rs) // memory[rs + offset] <-- rt              101011	rs	rt	offset
