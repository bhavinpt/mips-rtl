001001_00000_00111_0000000000001001			//	addiu $r7 $r0 #9 (rs, rt, imm) rt=rs+imm // number of digits
001001_00000_00011_0000000000000000			//	addiu $r3 $r0 #0 (rs, rt, imm) rt=rs+imm // first idx
001001_00000_00101_0000000000100100			//	addiu $r5 $r0 #36 (rs, rt, imm) rt=rs+imm // second idx
000000_00000_00000_0000100000100001			//	addu $r1 $r0 $r0 ; result = 0 (rs, rt, rd, fn) rd=rs+rt
000100_00111_00000_0000000000001000			//loop:	beq $r7 $r0 done ; done looping?  (rs, rt, off) (offset = 8 here) 
100011_00011_00010_0000000000000000			//	lw $r2 0($r3) ; load a element (rs, rt, off) rt=mem[rs+off]
100011_00101_00100_0000000000000000			//	lw $r4 0($r5) ; load b element (rs, rt, off)
000000_00010_00100_0001000000011000			//	mul $r2 $r2 $r4 ; assume this (rs, rt, rd, fn)
000000_00001_00010_0000100000100001			//	addu $r1 $r1 $r2 ; result += (*a) * (*b)  (rs, rt, rd, fn)
001001_00011_00011_0000000000000100			//	addiu $r3 $r3 #4  
001001_00101_00101_0000000000000100			//	addiu $r5 $r5 #4  
001001_00111_00111_1111111111111111			//	addiu $r7 $r7 #-1  
000010_11111_11111_1111111111110111			//	j loop  (offset = -9 here)
000000_11111_00000_0000000000001000			//done: jr $r31

// Program should take -> 4 + [((9 +1) * 9) + 1] + 5 = 102 clocks (pipelined + branch-prediction + forwarding)
// 
//   4 		  -> for first 4 inst. outside of loop
// + ((9 +1) * 9) -> for 9 instruction in the loop with +1 load delay between 7th and 8th instruction; and the loop runs 9 times
// + 1		  -> for BEQ exit on 10th iteration
// + 5		  -> to let the last JR instruction through
// + 2		  -> for stall on last BEQ fail
